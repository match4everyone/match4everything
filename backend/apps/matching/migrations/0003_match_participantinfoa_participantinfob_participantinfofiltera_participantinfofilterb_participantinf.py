# Generated by Django 3.0.7 on 2020-10-04 13:25

import apps.matching.models.participant_filter
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('matching', '0002_permission_group_creation'),
    ]

    operations = [
        migrations.CreateModel(
            name='ParticipantInfoA',
            fields=[
                ('uuid', models.CharField(blank=True, default=uuid.uuid4, max_length=100, unique=True)),
                ('registration_date', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('participant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='info', serialize=False, to='matching.ParticipantA')),
                ('pers_info--first_name', models.CharField(blank=True, default='', max_length=100, verbose_name='First Name')),
                ('pers_info--last_name', models.CharField(max_length=100, verbose_name='Last Name')),
                ('pers_info--phone_number', models.CharField(blank=True, default='', max_length=20, verbose_name='Phone Number')),
                ('info_supp--pref_area-ME', models.BooleanField(default=False, verbose_name='Medical Practice')),
                ('info_supp--pref_area-PD', models.BooleanField(default=False, verbose_name='Public Health Department and other Institutions')),
                ('info_supp--pref_area-HO', models.BooleanField(default=False, verbose_name='Hospital')),
                ('info_supp--pref_area-ES', models.BooleanField(default=False, verbose_name='Emergency Services')),
                ('info_supp--pref_area-PH', models.BooleanField(default=False, verbose_name='Pharmacy')),
                ('info_supp--pref_area-NF', models.BooleanField(default=False, verbose_name='Nursing Facilities')),
                ('info_supp--pref_area-LA', models.BooleanField(default=False, verbose_name='Laboratory')),
                ('info_supp--pref_area-MP', models.BooleanField(default=False, verbose_name='Medical Practice')),
                ('info_supp--time_avail', models.IntegerField(choices=[(0, '10h per week'), (1, '20h per week'), (2, '30h per week'), (3, '40h per week')], verbose_name='Time Availability Per Week')),
                ('info_supp--accom', models.BooleanField(blank=True, default=False, verbose_name='I need accommodation')),
                ('prof_train--medstud--experience', models.IntegerField(blank=True, choices=[(0, 'Preclinical Section'), (1, 'Last Year Student'), (2, 'Assistant Doctor'), (3, 'Consultant')], default=0, null=True, verbose_name='Experience Level')),
                ('prof_train--medstud--area-AN', models.BooleanField(default=False, verbose_name='Anaestesiology')),
                ('prof_train--medstud--area-SU', models.BooleanField(default=False, verbose_name='Surgery')),
                ('prof_train--medstud--area-IM', models.BooleanField(default=False, verbose_name='Internal Medicine')),
                ('prof_train--medstud--area-IC', models.BooleanField(default=False, verbose_name='Intensive Care')),
                ('prof_train--medstud--area-EM', models.BooleanField(default=False, verbose_name='Emergency Medicine')),
                ('prof_train--medstud--area-GM', models.BooleanField(default=False, verbose_name='General Medicine')),
                ('prof_train--medstud--internship', models.BooleanField(blank=True, default=False, verbose_name='Recognition as an internship or other study requirements is important')),
                ('prof_train--medstud--other', models.CharField(blank=True, default='', max_length=500, verbose_name='Other Qualifications')),
                ('prof_train--medstud-cond', models.BooleanField(default=False, verbose_name='Medical Student / Doctor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParticipantInfoB',
            fields=[
                ('uuid', models.CharField(blank=True, default=uuid.uuid4, max_length=100, unique=True)),
                ('registration_date', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('participant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='info', serialize=False, to='matching.ParticipantB')),
                ('pers_info--name', models.CharField(max_length=100, verbose_name='Official name of your institution')),
                ('pers_info--contact', models.CharField(max_length=100, verbose_name='Full name of the person to contact')),
                ('pers_info--phone_number', models.CharField(max_length=100, verbose_name='Phone number of contact person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParticipantInfoLocationB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(blank=True, default=uuid.uuid4, max_length=100, unique=True)),
                ('registration_date', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('country_code', models.CharField(choices=[('DE', 'Germany'), ('AT', 'Austria')], default='DE', max_length=2)),
                ('plz', models.CharField(max_length=5, null=True)),
                ('radius', models.IntegerField(choices=[(0, '0 km'), (10, '<10 km'), (20, '<20 km'), (40, '<40 km'), (50, '<50 km')], default=40)),
                ('participant_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location', to='matching.ParticipantInfoB')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParticipantInfoLocationA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(blank=True, default=uuid.uuid4, max_length=100, unique=True)),
                ('registration_date', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('country_code', models.CharField(choices=[('DE', 'Germany'), ('AT', 'Austria')], default='DE', max_length=2)),
                ('plz', models.CharField(max_length=5, null=True)),
                ('radius', models.IntegerField(choices=[(0, '0 km'), (10, '<10 km'), (20, '<20 km'), (40, '<40 km'), (50, '<50 km')], default=40)),
                ('participant_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location', to='matching.ParticipantInfoA')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParticipantInfoFilterB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(blank=True, default=uuid.uuid4, max_length=100, unique=True)),
                ('registration_date', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('filter_name', models.CharField(default=apps.matching.models.participant_filter.filter_name, max_length=100)),
                ('subject', models.CharField(blank=True, max_length=300)),
                ('contact_text', models.CharField(blank=True, max_length=500)),
                ('pers_info--name-icontains', models.CharField(blank=True, max_length=100, null=True)),
                ('pers_info--contact-icontains', models.CharField(blank=True, max_length=100, null=True)),
                ('pers_info--phone_number-icontains', models.CharField(blank=True, max_length=100, null=True)),
                ('location_country_code', models.CharField(choices=[('DE', 'Germany'), ('AT', 'Austria')], max_length=2)),
                ('location_zipcode', models.IntegerField()),
                ('location_distance', models.IntegerField(choices=[(0, '0 km'), (10, '<10 km'), (20, '<20 km'), (40, '<40 km'), (50, '<50 km')])),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-registration_date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParticipantInfoFilterA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(blank=True, default=uuid.uuid4, max_length=100, unique=True)),
                ('registration_date', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('filter_name', models.CharField(default=apps.matching.models.participant_filter.filter_name, max_length=100)),
                ('subject', models.CharField(blank=True, max_length=300)),
                ('contact_text', models.CharField(blank=True, max_length=500)),
                ('info_supp--pref_area-ME-exact', models.NullBooleanField()),
                ('info_supp--pref_area-PD-exact', models.NullBooleanField()),
                ('info_supp--pref_area-HO-exact', models.NullBooleanField()),
                ('info_supp--pref_area-ES-exact', models.NullBooleanField()),
                ('info_supp--pref_area-PH-exact', models.NullBooleanField()),
                ('info_supp--pref_area-NF-exact', models.NullBooleanField()),
                ('info_supp--pref_area-LA-exact', models.NullBooleanField()),
                ('info_supp--pref_area-MP-exact', models.NullBooleanField()),
                ('info_supp--time_avail-gte', models.IntegerField(blank=True, choices=[(None, 'No choice'), (0, '10h per week'), (1, '20h per week'), (2, '30h per week'), (3, '40h per week')], null=True)),
                ('info_supp--time_avail-lte', models.IntegerField(blank=True, choices=[(None, 'No choice'), (0, '10h per week'), (1, '20h per week'), (2, '30h per week'), (3, '40h per week')], null=True)),
                ('info_supp--accom-exact', models.NullBooleanField()),
                ('prof_train--medstud-cond-exact', models.NullBooleanField()),
                ('prof_train--medstud--experience-gte', models.IntegerField(blank=True, choices=[(None, 'No choice'), (0, 'Preclinical Section'), (1, 'Last Year Student'), (2, 'Assistant Doctor'), (3, 'Consultant')], null=True)),
                ('prof_train--medstud--experience-lte', models.IntegerField(blank=True, choices=[(None, 'No choice'), (0, 'Preclinical Section'), (1, 'Last Year Student'), (2, 'Assistant Doctor'), (3, 'Consultant')], null=True)),
                ('prof_train--medstud--area-AN-exact', models.NullBooleanField()),
                ('prof_train--medstud--area-SU-exact', models.NullBooleanField()),
                ('prof_train--medstud--area-IM-exact', models.NullBooleanField()),
                ('prof_train--medstud--area-IC-exact', models.NullBooleanField()),
                ('prof_train--medstud--area-EM-exact', models.NullBooleanField()),
                ('prof_train--medstud--area-GM-exact', models.NullBooleanField()),
                ('prof_train--medstud--internship-exact', models.NullBooleanField()),
                ('prof_train--medstud--other-icontains', models.CharField(blank=True, max_length=500, null=True)),
                ('location_country_code', models.CharField(choices=[('DE', 'Germany'), ('AT', 'Austria')], max_length=2)),
                ('location_zipcode', models.IntegerField()),
                ('location_distance', models.IntegerField(choices=[(0, '0 km'), (10, '<10 km'), (20, '<20 km'), (40, '<40 km'), (50, '<50 km')])),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-registration_date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(blank=True, default=uuid.uuid4, max_length=100, unique=True)),
                ('initiator', models.CharField(choices=[('A', 'A'), ('B', 'B')], max_length=1)),
                ('match_date', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('state', models.IntegerField(choices=[(1, 'contacted'), (2, 'successful'), (3, 'not successful'), (4, 'declined')], default=1)),
                ('response_subject', models.CharField(blank=True, max_length=300, null=True)),
                ('response_message', models.CharField(blank=True, max_length=500, null=True)),
                ('filterA', models.ForeignKey(blank=True, null=True, on_delete=models.SET(None), to='matching.ParticipantInfoFilterA')),
                ('filterB', models.ForeignKey(blank=True, null=True, on_delete=models.SET(None), to='matching.ParticipantInfoFilterB')),
                ('participantA', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match', to='matching.ParticipantA')),
                ('participantB', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match', to='matching.ParticipantB')),
            ],
            options={
                'ordering': ['state', 'match_date'],
            },
        ),
    ]
